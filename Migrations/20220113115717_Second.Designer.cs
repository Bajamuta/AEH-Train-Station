// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TrainStation.Data;

namespace TrainStation.Migrations
{
    [DbContext(typeof(TrainStationContext))]
    [Migration("20220113115717_Second")]
    partial class Second
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.13")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TrainStation.Data.AspNetRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "NormalizedName" }, "RoleNameIndex")
                        .IsUnique()
                        .HasFilter("([NormalizedName] IS NOT NULL)");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("TrainStation.Data.AspNetRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RoleId" }, "IX_AspNetRoleClaims_RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("TrainStation.Data.AspNetUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "NormalizedEmail" }, "EmailIndex");

                    b.HasIndex(new[] { "NormalizedUserName" }, "UserNameIndex")
                        .IsUnique()
                        .HasFilter("([NormalizedUserName] IS NOT NULL)");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("TrainStation.Data.AspNetUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UserId" }, "IX_AspNetUserClaims_UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("TrainStation.Data.AspNetUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex(new[] { "UserId" }, "IX_AspNetUserLogins_UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("TrainStation.Data.AspNetUserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex(new[] { "RoleId" }, "IX_AspNetUserRoles_RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("TrainStation.Data.AspNetUserToken", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("TrainStation.Models.Car", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Available")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ProductionDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Sitting")
                        .HasColumnType("int");

                    b.Property<int>("Standing")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Car");
                });

            modelBuilder.Entity("TrainStation.Models.Cars", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CarID")
                        .HasColumnType("int")
                        .HasColumnName("CarID");

                    b.Property<int>("RideID")
                        .HasColumnType("int")
                        .HasColumnName("RideID");

                    b.HasKey("ID");

                    b.HasIndex(new[] { "CarID" }, "IX_Cars_CarID");

                    b.HasIndex(new[] { "RideID" }, "IX_Cars_RideID");

                    b.ToTable("Cars");
                });

            modelBuilder.Entity("TrainStation.Models.Conductor", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ConductorID")
                        .HasColumnType("int")
                        .HasColumnName("ConductorID");

                    b.Property<int>("RideID")
                        .HasColumnType("int")
                        .HasColumnName("RideID");

                    b.HasKey("ID");

                    b.HasIndex(new[] { "ConductorID" }, "IX_Conductors_ConductorID");

                    b.HasIndex(new[] { "RideID" }, "IX_Conductors_RideID");

                    b.ToTable("Conductors");
                });

            modelBuilder.Entity("TrainStation.Models.Employee", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PermissionID")
                        .HasColumnType("int")
                        .HasColumnName("PermissionID");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex(new[] { "PermissionID" }, "IX_Employee_PermissionID");

                    b.ToTable("Employee");
                });

            modelBuilder.Entity("TrainStation.Models.Engine", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Available")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ProductionDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.ToTable("Engine");
                });

            modelBuilder.Entity("TrainStation.Models.Journey", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<TimeSpan>("BreakTimeOnStation")
                        .HasColumnType("time");

                    b.Property<int>("DestinationPlaceId")
                        .HasColumnType("int")
                        .HasColumnName("DestinationPlaceID");

                    b.Property<DateTime>("EndingDateTime")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("FullTimeRide")
                        .HasColumnType("time");

                    b.Property<int>("RideId")
                        .HasColumnType("int")
                        .HasColumnName("RideID");

                    b.Property<DateTime>("StartingDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("StartingPlaceId")
                        .HasColumnType("int")
                        .HasColumnName("StartingPlaceID");

                    b.Property<int>("StatusId")
                        .HasColumnType("int")
                        .HasColumnName("StatusID");

                    b.Property<decimal>("TicketBasePrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ID");

                    b.HasIndex(new[] { "DestinationPlaceId" }, "IX_Journey_DestinationPlaceID");

                    b.HasIndex(new[] { "RideId" }, "IX_Journey_RideID");

                    b.HasIndex(new[] { "StartingPlaceId" }, "IX_Journey_StartingPlaceID");

                    b.HasIndex(new[] { "StatusId" }, "IX_Journey_StatusID");

                    b.ToTable("Journey");
                });

            modelBuilder.Entity("TrainStation.Models.Permission", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Permission");
                });

            modelBuilder.Entity("TrainStation.Models.Place", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PostalCode")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("TravelTime")
                        .HasColumnType("time");

                    b.HasKey("ID");

                    b.ToTable("Place");
                });

            modelBuilder.Entity("TrainStation.Models.Ride", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DriverId")
                        .HasColumnType("int")
                        .HasColumnName("DriverID");

                    b.Property<int>("EngineId")
                        .HasColumnType("int")
                        .HasColumnName("EngineID");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex(new[] { "DriverId" }, "IX_Ride_DriverID");

                    b.HasIndex(new[] { "EngineId" }, "IX_Ride_EngineID");

                    b.ToTable("Ride");
                });

            modelBuilder.Entity("TrainStation.Models.Status", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Status");
                });

            modelBuilder.Entity("TrainStation.Models.Ticket", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CarID")
                        .HasColumnType("int")
                        .HasColumnName("CarID");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<DateTime>("SoldDateTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("SoldPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("TypeOfTicketID")
                        .HasColumnType("int")
                        .HasColumnName("TypeID");

                    b.HasKey("ID");

                    b.HasIndex(new[] { "CarID" }, "IX_Ticket_CarID");

                    b.HasIndex(new[] { "TypeOfTicketID" }, "IX_Ticket_TypeID");

                    b.ToTable("Ticket");
                });

            modelBuilder.Entity("TrainStation.Models.Tickets", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("JourneyID")
                        .HasColumnType("int")
                        .HasColumnName("JourneyID");

                    b.Property<int>("TicketID")
                        .HasColumnType("int")
                        .HasColumnName("TicketID");

                    b.HasKey("ID");

                    b.HasIndex(new[] { "JourneyID" }, "IX_Tickets_JourneyID");

                    b.HasIndex(new[] { "TicketID" }, "IX_Tickets_TicketID");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("TrainStation.Models.TypeOfTicket", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("TypeOfTicket");
                });

            modelBuilder.Entity("TrainStation.Data.AspNetRoleClaim", b =>
                {
                    b.HasOne("TrainStation.Data.AspNetRole", "Role")
                        .WithMany("AspNetRoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("TrainStation.Data.AspNetUserClaim", b =>
                {
                    b.HasOne("TrainStation.Data.AspNetUser", "User")
                        .WithMany("AspNetUserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TrainStation.Data.AspNetUserLogin", b =>
                {
                    b.HasOne("TrainStation.Data.AspNetUser", "User")
                        .WithMany("AspNetUserLogins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TrainStation.Data.AspNetUserRole", b =>
                {
                    b.HasOne("TrainStation.Data.AspNetRole", "Role")
                        .WithMany("AspNetUserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TrainStation.Data.AspNetUser", "User")
                        .WithMany("AspNetUserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TrainStation.Data.AspNetUserToken", b =>
                {
                    b.HasOne("TrainStation.Data.AspNetUser", "User")
                        .WithMany("AspNetUserTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TrainStation.Models.Cars", b =>
                {
                    b.HasOne("TrainStation.Models.Car", "Car")
                        .WithMany("Cars")
                        .HasForeignKey("CarID")
                        .IsRequired();

                    b.HasOne("TrainStation.Models.Ride", "Ride")
                        .WithMany("Cars")
                        .HasForeignKey("RideID")
                        .IsRequired();

                    b.Navigation("Car");

                    b.Navigation("Ride");
                });

            modelBuilder.Entity("TrainStation.Models.Conductor", b =>
                {
                    b.HasOne("TrainStation.Models.Employee", "ConductorEmployee")
                        .WithMany("Conductors")
                        .HasForeignKey("ConductorID")
                        .IsRequired();

                    b.HasOne("TrainStation.Models.Ride", "Ride")
                        .WithMany("Conductors")
                        .HasForeignKey("RideID")
                        .IsRequired();

                    b.Navigation("ConductorEmployee");

                    b.Navigation("Ride");
                });

            modelBuilder.Entity("TrainStation.Models.Employee", b =>
                {
                    b.HasOne("TrainStation.Models.Permission", "Permission")
                        .WithMany("Employees")
                        .HasForeignKey("PermissionID")
                        .IsRequired();

                    b.Navigation("Permission");
                });

            modelBuilder.Entity("TrainStation.Models.Journey", b =>
                {
                    b.HasOne("TrainStation.Models.Place", "DestinationPlace")
                        .WithMany("JourneyDestinationPlaces")
                        .HasForeignKey("DestinationPlaceId")
                        .IsRequired();

                    b.HasOne("TrainStation.Models.Ride", "Ride")
                        .WithMany("Journeys")
                        .HasForeignKey("RideId")
                        .IsRequired();

                    b.HasOne("TrainStation.Models.Place", "StartingPlace")
                        .WithMany("JourneyStartingPlaces")
                        .HasForeignKey("StartingPlaceId")
                        .IsRequired();

                    b.HasOne("TrainStation.Models.Status", "Status")
                        .WithMany("Journeys")
                        .HasForeignKey("StatusId")
                        .IsRequired();

                    b.Navigation("DestinationPlace");

                    b.Navigation("Ride");

                    b.Navigation("StartingPlace");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("TrainStation.Models.Ride", b =>
                {
                    b.HasOne("TrainStation.Models.Employee", "Driver")
                        .WithMany("Rides")
                        .HasForeignKey("DriverId")
                        .IsRequired();

                    b.HasOne("TrainStation.Models.Engine", "Engine")
                        .WithMany("Rides")
                        .HasForeignKey("EngineId")
                        .IsRequired();

                    b.Navigation("Driver");

                    b.Navigation("Engine");
                });

            modelBuilder.Entity("TrainStation.Models.Ticket", b =>
                {
                    b.HasOne("TrainStation.Models.Car", "Car")
                        .WithMany("Tickets")
                        .HasForeignKey("CarID")
                        .IsRequired();

                    b.HasOne("TrainStation.Models.TypeOfTicket", "TypeOfTicket")
                        .WithMany("Tickets")
                        .HasForeignKey("TypeOfTicketID")
                        .IsRequired();

                    b.Navigation("Car");

                    b.Navigation("TypeOfTicket");
                });

            modelBuilder.Entity("TrainStation.Models.Tickets", b =>
                {
                    b.HasOne("TrainStation.Models.Journey", "Journey")
                        .WithMany("Tickets")
                        .HasForeignKey("JourneyID")
                        .IsRequired();

                    b.HasOne("TrainStation.Models.Ticket", "Ticket")
                        .WithMany("Tickets")
                        .HasForeignKey("TicketID")
                        .IsRequired();

                    b.Navigation("Journey");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("TrainStation.Data.AspNetRole", b =>
                {
                    b.Navigation("AspNetRoleClaims");

                    b.Navigation("AspNetUserRoles");
                });

            modelBuilder.Entity("TrainStation.Data.AspNetUser", b =>
                {
                    b.Navigation("AspNetUserClaims");

                    b.Navigation("AspNetUserLogins");

                    b.Navigation("AspNetUserRoles");

                    b.Navigation("AspNetUserTokens");
                });

            modelBuilder.Entity("TrainStation.Models.Car", b =>
                {
                    b.Navigation("Cars");

                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("TrainStation.Models.Employee", b =>
                {
                    b.Navigation("Conductors");

                    b.Navigation("Rides");
                });

            modelBuilder.Entity("TrainStation.Models.Engine", b =>
                {
                    b.Navigation("Rides");
                });

            modelBuilder.Entity("TrainStation.Models.Journey", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("TrainStation.Models.Permission", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("TrainStation.Models.Place", b =>
                {
                    b.Navigation("JourneyDestinationPlaces");

                    b.Navigation("JourneyStartingPlaces");
                });

            modelBuilder.Entity("TrainStation.Models.Ride", b =>
                {
                    b.Navigation("Cars");

                    b.Navigation("Conductors");

                    b.Navigation("Journeys");
                });

            modelBuilder.Entity("TrainStation.Models.Status", b =>
                {
                    b.Navigation("Journeys");
                });

            modelBuilder.Entity("TrainStation.Models.Ticket", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("TrainStation.Models.TypeOfTicket", b =>
                {
                    b.Navigation("Tickets");
                });
#pragma warning restore 612, 618
        }
    }
}
